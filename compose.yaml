services:
  # Kafka broker using KRaft mode
  kafka:
    image: apache/kafka:3.8.0  # Pin specific version instead of latest
    container_name: kafka-broker
    ports:
      - "9092:9092"
    environment:
      # Configure listeners for both docker and host communication
      KAFKA_LISTENERS: CONTROLLER://kafka:9091,HOST://0.0.0.0:9092,DOCKER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: HOST://localhost:9092,DOCKER://${KAFKA_BOOTSTRAP_SERVER}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT

      # Settings required for KRaft mode
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9091

      # Listener to use for broker-to-broker communication
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      # Required for a single node cluster
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

      # Storage configuration
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
      CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk

    volumes:
      - kafka-data:/var/lib/kafka/data # Persist Kafka data
    networks:
      - common-network
    healthcheck:
      test: [ "CMD-SHELL", "/opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s

  # Kafka UI for managing and monitoring Kafka
  kafka-ui:
    image: kafbat/kafka-ui:main
    container_name: kafka-ui
    ports:
      - 8080:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9093
    depends_on:
      kafka:
        condition: service_healthy  # Wait for broker to be healthy
    networks:
      - common-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://localhost:8080/ || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # PostgreSQL database for storing data
  postgres:
    image: postgres
    container_name: postgres-db
    restart: always
    # set shared memory limit when using docker compose
    shm_size: 128mb
    # or set shared memory limit when deploy via swarm stack
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust # Allow connections without password for local development
      POSTGRES_PORT: 5432  # Specify the port for PostgreSQL
    volumes:
      - type: tmpfs
        target: /dev/shm
        tmpfs:
          size: 134217728 # 128*2^20 bytes = 128Mb

      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql # Initialize database with SQL script and postgres will run it
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - common-network

  # Adminer for database management
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - 8050:8080
    depends_on:
      postgres:
        condition: service_healthy  # Wait for PostgreSQL to be healthy
    networks:
      - common-network

  # Data API service for collecting market data
  market-data-api:
    build:
      context: .
      dockerfile: apis/Dockerfile
    container_name: market-data-collection-api
    ports:
      - "${DATA_API_PORT}:8000"
    # No environment variables needed - pure data collection API
    depends_on:
      # Only depends on itself to start after infrastructure is ready
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    networks:
      - common-network
    healthcheck:
      test: ["CMD", "curl", "-f", "${DATA_API_URL}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    volumes:
      - ./apis:/app  # For development - live reload
      
volumes:
  kafka-data:
  postgres_data:
networks:
  common-network: